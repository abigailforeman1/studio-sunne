/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/info-icon.gltf --transform 
Files: ./public/info-icon.gltf [2.73MB] > /Users/abi/Documents/abigail/studio sunne/studio sunne/studio sunne website/studio-sunne/info-icon-transformed.glb [137.02KB] (95%)
*/

import React, { useRef, useState, useEffect } from "react";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";
import { useGLTF } from "@react-three/drei";

export function InfoModel(props) {
  /* Refs */
  const group = useRef();
  const actions = useRef();

  /* State */
  const [animation, setAnimation] = useState(null);

  /* Mixer */
  const [mixer] = useState(() => new THREE.AnimationMixer(null));

  const { nodes, materials } = useGLTF("/info-icon-transformed.glb");

  /* set animation */
  useEffect(() => {
    if (animation) {
      actions.current = {
        idle: mixer.clipAction(animation[0], group.current),
      };
      actions.current.idle.play();
      return () => animation.forEach((clip) => mixer.uncacheClip(clip));
    }
  }, [animation]);

  //* animation update
  useFrame((_, delta) => mixer.update(delta));
  //* rotation
  useFrame(() => {
    // group.current.rotation.y += 0.005;
    group.current.rotation.x += 0.005;

    // if (group.current.scale.x < 1) {
    //   group.current.scale.x += 0.01;
    //   group.current.scale.y += 0.01;
    //   group.current.scale.z += 0.01;
  });

  return (
    <group {...props} dispose={null} ref={group}>
      <mesh
        geometry={nodes.mesh_0.geometry}
        material={nodes.mesh_0.material}
        ref={group}
      />
    </group>
  );
}

useGLTF.preload("/info-icon-transformed.glb");
